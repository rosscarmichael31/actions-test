name: Build & Deploy - Prod

on:
  push:
    branches:
      - master

env:
  REGISTRY: ghcr.io
  IMAGE_NAME: ${{ github.repository }}/appruntime

permissions:
  contents: write
  packages: write
  id-token: write
  pull-requests: read

jobs:
  build-check:
    if: ${{ !contains(github.event.head_commit.message, '[bot] Update image tag to') }}
    runs-on: ubuntu-latest
    steps:
      - name: Check if build should continue
        run: |
          echo "Push to master is not from bot -> continue build"

  build-and-push:
    needs: build-check
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@b4ffde65f46336ab88eb53be808477a3936bae11 # v4.1.1
        name: Checkout Branch
        with:
          ref: ${{ github.head_ref }}
          token: ${{ secrets.SA_WWLDEV_REPO_PAT }}
          fetch-depth: 0

      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v3

      - name: Log in to the Container registry
        uses: docker/login-action@343f7c4344506bcbf9b4de18042ae17996df046d # v3.0.0
        with:
          registry: ${{ env.REGISTRY }}
          username: ${{ github.actor }}
          password: ${{ secrets.GITHUB_TOKEN }}

      - name: Bump and Tag Version
        id: tag
        uses: jefflinse/pr-semver-bump@v1.6.0
        with:
          mode: bump
          repo-token: ${{ secrets.GITHUB_TOKEN }}
          major-label: major
          minor-label: minor
          patch-label: patch
          noop-labels:
            skip build
          base-branch: true

      - name: Extract metadata (tags, labels) for Docker
        id: meta
        if: ${{ steps.tag.outputs.version }}
        uses: docker/metadata-action@8e5442c4ef9f78752691e2d8f8d19755c6f78e81 # v5.5.1
        with:
          images: ${{ env.REGISTRY }}/${{ env.IMAGE_NAME }}
          tags: |
            type=raw,value=${{ steps.tag.outputs.version }}

      - name: Set environment variables
        if: ${{ steps.tag.outputs.version }}
        run: |
          echo "TAGS=${{ steps.meta.outputs.tags }}" >> $GITHUB_ENV
          echo "LABELS=${{ steps.meta.outputs.labels }}" >> $GITHUB_ENV
          echo "NEW_VERSION=${{ steps.meta.outputs.version }}" >> $GITHUB_ENV

      - name: Build and push Docker image to ghcr.io
        uses: docker/build-push-action@4a13e500e55cf31b7a5d59a38ab2040ab0f42f56 # v5.1.0
        with:
          context: .
          push: true
          tags: ${{ env.TAGS }}
          labels: ${{ env.LABELS }}
          cache-from: type=gha
          cache-to: type=gha,mode=max
          file: Dockerfile_appruntime
          secrets: |
            "GRGIT_USER=${{ secrets.GRGIT_USER }}"
            "GRGIT_PASS=${{ secrets.GRGIT_PASS }}"

      - name: Create GitHub release
        id: create_release
        if: ${{ steps.tag.outputs.version }}
        uses: actions/create-release@v1
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        with:
          tag_name: ${{ env.NEW_VERSION }}
          release_name: ${{ env.NEW_VERSION }}
          draft: false
          prerelease: false

      - name: Update image tag in stack_definition.yaml
        if: ${{ steps.tag.outputs.version }}
        uses: mikefarah/yq@v4.43.1
        with:
          cmd: |
            yq -i '.stackDef.resources.applications."bulk-shipment-service".image.tag = "${{ env.NEW_VERSION }}"' appruntime/stack-definition.yaml
            cat appruntime/stack-definition.yaml

      - name: Commit changes
        if: ${{ steps.tag.outputs.version }}
        uses: stefanzweifel/git-auto-commit-action@8621497c8c39c72f3e2a999a26b4ca1b5058a842 # v5.0.1
        with:
          skip_fetch: false
          commit_message: |
            [bot] Update image tag to ${{ steps.tag.outputs.version }}

      - name: Print container version
        if: ${{ steps.tag.outputs.version }}
        run: |
          echo "New container version: ${{ env.NEW_VERSION }}"
          echo ':package: New container version: `${{ env.NEW_VERSION }}`' >> $GITHUB_STEP_SUMMARY

  deploy-dev:
    name: Deploy stack to development
    needs: build-and-push
    uses: ./.github/workflows/deployment-dev.yaml
    with:
      run_liquibase: true

  deploy-prod:
    name: Deploy stack to production
    needs: deploy-dev
    uses: ./.github/workflows/deployment-prod.yaml
    with:
      bundle_ref: ${{ needs.deploy-dev.outputs.bundle_ref }}
      run_liquibase: true
